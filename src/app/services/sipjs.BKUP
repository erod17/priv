import { Injectable, ÉµConsole, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import audioPlayer from './sounds.service';
import { ToneService } from './tone.service';
// import * as SIP from 'sip.js';
import {
  Invitation,
  Inviter,
  Info,
  InviterOptions,
  Referral,
  Registerer,
  RegistererOptions,
  Session,
  SessionState,
  UserAgent,
  UserAgentOptions,
  InvitationAcceptOptions,
  Notification,
  Web
} from 'sip.js';
import { SessionDescriptionHandler } from 'sip.js/lib/platform/web/session-description-handler';


function _window(idElement: any): any {
  // return the global native browser window object
  return window.document.getElementById(idElement);
}

@Injectable({
  providedIn: 'root'
})


export class SipjsService {

  // @ViewChild('remoteVideo') remoteVideo: HTMLInputElement;

  private wsServer: string;
  private userAgent: UserAgent;

  mediaOptions = {
    sessionDescriptionHandlerOptions : {
      constraints: {
        audio: true,
        video: false
      }
    }
  };

  mediaOptionsVideoChat = {
    sessionDescriptionHandlerOptions : {
      constraints: {
        audio: true,
        video: true
      }
    }
  };

  mediaOptionsScreenSharing = {
    sessionDescriptionHandlerOptions : {
      constraints: {
        audio: true,
        video: {mediaSource: 'screen'}
      }
    }
  };

  public state = {
    init            : false,
    status          : 'disconnected',
    session         : null,
    ringing         : false,
    incomingSession : null,
    autoanswer      : false
  };


  constructor(
    public toneService: ToneService,
    private router: Router,

  ) {
    audioPlayer.initialize();

  }



  setState(newState: any): void {
    console.log(newState);
    this.state = Object.assign({}, this.state, newState);
    return;
  }

  getState(state: any): void {
    return this.state[state];
  }

  async connect(userData: any): Promise<any> {

    console.log(userData);
    if (!userData) {
        return;
    }

    this.wsServer = userData.wss;

    // Setup SIPJs
    try {

        const transportOptions = {
          server: 'wss://' + this.wsServer + ':7443'
        };
        const uri = UserAgent.makeURI('sip:' + userData.ext + '@' + userData.dom);

        if (!uri) {
          console.log('URI error');
          return;
        } else {

          const userAgentOptions: UserAgentOptions = {
            authorizationPassword: userData.pwd,
            authorizationUsername: userData.ext,
            uri,
            transportOptions,
          };

          // const userAgent = new UserAgent(userAgentOptions);
          this.userAgent = new UserAgent(userAgentOptions);
          const registerer = new Registerer(this.userAgent);





          this.userAgent.delegate = {
            onInvite(invitation: Invitation): void {

              // An Invitation is a Session
              const incomingSession: Session = invitation;
              console.log(incomingSession);
              // Setup incoming session delegate
              incomingSession.delegate = {
                // Handle incoming REFER request.
                onRefer(referral: Referral): void {
                  // ...
                  // alert('onRefer incomingh');
                },

                onInvite(request: any, response: string, statusCode: number): void {
                  // ...
                  // alert('onInvite');
                },

                onInfo(info: Info): void {

                },

                onNotify(notification: Notification): void {
                  // alert('onNotify');
                },

                onSessionDescriptionHandler(sessionDescriptionHandler: SessionDescriptionHandler, provisional: boolean): void {
                  // alert('onSessionDescriptionHandler');

                  // this._audioElement = document.body.appendChild(document.createElement('audio'));
                  // this._audioElement.srcObject = e.stream;
                  // this._audioElement.play();

                  // const pc = incomingSession.sessionDescriptionHandler.peerConnection;
                  // console.log(pc);


                  // const receivers = pc.getReceivers();
                  // console.log(receivers);

                  // if (receivers.length) {
                  // try {

                  //   const remoteStream = new MediaStream();
                  //   receivers.forEach((receiver: any) => {
                  //     remoteStream.addTrack(receiver.track);
                  //   });


                  //   if (this.nativeWindow('remoteVideo').srcObject) {
                  //     this.nativeWindow('remoteVideo').pause();
                  //   }
                  //   this.nativeWindow('remoteVideo').srcObject = remoteStream;
                  //   this.nativeWindow('remoteVideo').play();

                  // } catch (err) {
                  //   console.log('error playing sound-video - Local - ', err );
                  // }
                  // }


                  // const mediaElement = window.document.getElementById('remoteVideo');
                  // console.log(mediaElement);
                  // const remoteStream = new MediaStream();

                  // incomingSession.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {
                  //   console.log(receiver);
                  //   if (receiver.track) {
                  //     remoteStream.addTrack(receiver.track);
                  //   }
                  // });

                  // mediaElement.srcObject = remoteStream;
                  // mediaElement.play();



                }

              };

              // Handle incoming session state changes.
              incomingSession.stateChange.addListener((newState: SessionState) => {
                switch (newState) {
                  case SessionState.Initial:
                    // Session initial.
                    // alert('Session initial.');
                    break;
                  case SessionState.Establishing:
                    // Session is establishing.
                    // alert('Session is establishing.');
                    break;
                  case SessionState.Established:
                    // Session has been established.
                    // alert('Session has been established.');




                    // const mediaElement = window.document.getElementById('remoteVideo');
                    // console.log(mediaElement);
                    // const remoteStream = new MediaStream();

                    // incomingSession.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {
                    //   console.log(receiver);
                    //   if (receiver.track) {
                    //     remoteStream.addTrack(receiver.track);
                    //   }
                    // });
                    // mediaElement.srcObject = remoteStream;
                    // mediaElement.play();

                    // this.nativeWindow('remoteVideo').srcObject = remoteStream;
                    // this.nativeWindow('remoteVideo').play();





                    break;
                  case SessionState.Terminated:
                    // Session has terminated.
                    // alert('Session has terminated.');
                    break;
                  default:
                    break;
                }
              });

              // Handle incoming INVITE request.
              const constrainsDefault: MediaStreamConstraints = {
                audio: true,
                video: true,
              };

              const options: InvitationAcceptOptions = {
                sessionDescriptionHandlerOptions: {
                  constraints: constrainsDefault,
                },
              };

              // return incomingSession.accept(options);
            }
          };











          await this.userAgent.start()
            .then(() => {
              registerer.register();
              console.log('Registered');










              // Send an outgoing INVITE request
              const target = UserAgent.makeURI('sip:331000000010@pbx.fokuz.online');
              if (!target) {
                throw new Error('Failed to create target URI.');
              }

              // Create a new Inviter
              const inviterOptions: InviterOptions = {
                sessionDescriptionHandlerOptions: {
                  constraints: {
                    video: true,
                    audio: true
                  },
                }
               };
              const inviter = new Inviter(this.userAgent, target, inviterOptions);

              // An Inviter is a Session
              const outgoingSession: Session = inviter;

              // Setup outgoing session delegate
              outgoingSession.delegate = {
                // Handle incoming REFER request.
                onRefer(referral: Referral): void {
                  // ...
                }
              };

              // Handle outgoing session state changes.
              outgoingSession.stateChange.addListener((newState: SessionState) => {
                switch (newState) {
                  case SessionState.Establishing:
                    // Session is establishing.
                    break;
                  case SessionState.Established:
                    // Session has been established.

                    const mediaElement = window.document.getElementById('remoteVideo');
                    const sdh = outgoingSession.sessionDescriptionHandler;


                    if (!sdh) {
                      return undefined;
                    }
                    if (!(sdh instanceof Web.SessionDescriptionHandler)) {
                      throw new Error('Session description handler not instance of web SessionDescriptionHandler');
                    }

                    const peerConnection = sdh.peerConnection;
                    if (!peerConnection) {
                      throw new Error('Peer connection closed.');
                    }

                    // const rtpReceiver = peerConnection.getReceivers().find((receiver) => {
                    //   return receiver.track.kind === 'audio';
                    // });

                    // if (!rtpReceiver) {
                    //   throw new Error('Failed to find audio receiver');
                    // }

                    const remoteStream = new MediaStream();
                    peerConnection.getReceivers().forEach((receiver) => {
                      console.log(receiver);
                      if (receiver.track) {
                        remoteStream.addTrack(receiver.track);
                      }
                    });

                    // const track = rtpReceiver.track;
                    // remoteStream.addTrack(track);

                    // mediaElement.srcObject = remoteStream;
                    // mediaElement.play();











                    // const mediaElement = window.document.getElementById('remoteVideo');
                    // console.log(mediaElement);
                    // const remoteStream = new MediaStream();

                    // outgoingSession.sessionDescriptionHandler.peerConnection.getReceivers().forEach((receiver) => {
                    //   console.log(receiver);
                    //   if (receiver.track) {
                    //     remoteStream.addTrack(receiver.track);
                    //   }
                    // });
                    // mediaElement.srcObject = remoteStream;
                    // mediaElement.play();


                    break;
                  case SessionState.Terminated:
                    // Session has terminated.
                    break;
                  default:
                    break;
                }
              });

              // Send the INVITE request
              inviter.invite()
                .then(() => {
                  // INVITE sent
                })
                .catch((error: Error) => {
                  // INVITE did not send
                });














            })
            .catch((error: Error) => {
              // userAgent.isConnected() === false
            });

        }




    } catch (error) {
        console.log('JsSIP config error', error);
        return;
    }
  }


  addEvents(sipUA: any): void {
    alert('pasando');
    sipUA.on('connecting', () => {
    alert('erik');
    this.setState({ status : 'connecting' });
    });

    sipUA.on('connected', () => {
      alert('erik');
      this.setState({ status: 'connected' });
      sipUA.register();
    });

    sipUA.on('disconnected', () => {
      this.setState({ status: 'disconnected' });
    });

    sipUA.on('registered', () => {
      console.log('+++++  user registered successfull  +++++');
      this.setState({ status: 'registered' });
    });

    sipUA.on('unregistered', () => {
        const connected = (sipUA.isRegistered()) ? 'connected' : 'disconnected';
        this.setState({ status:  connected});
    });

    sipUA.on('message', (data) => {
        console.log('[SMS] - New Message', data);
        // this.incomingSms.next(data);
    });

    sipUA.on('registrationFailed', (data: any) => {
        console.log('---------- Registration Failed! ----------');
        console.log(data.cause);
        this.setState({ status: data.cause });
    });

    // \\ incoming calls // \\
    sipUA.on('invite', (data: any) => {
      alert('pasando');
      // this.handleIncomingCall(data);
    });

  }





  // async addEvents(UA: UserAgent): Promise<any> {

  //   UA.delegate = {

  //     onInvite(invitation: Invitation): void {

  //       // An Invitation is a Session
  //       const incomingSession: Session = invitation;

  //       // Setup incoming session delegate
  //       incomingSession.delegate = {
  //         // Handle incoming REFER request.
  //         onRefer(referral: Referral): void {
  //           // ...
  //         }
  //       };

  //       // Handle incoming session state changes.
  //       incomingSession.stateChange.addListener((newState: SessionState) => {
  //         switch (newState) {
  //           case SessionState.Establishing:
  //             // Session is establishing.
  //             alert('Session is establishing.');
  //             break;
  //           case SessionState.Established:
  //             // Session has been established.
  //             alert('Session has been established.');
  //             break;
  //           case SessionState.Terminated:
  //             // Session has terminated.
  //             alert('Session has terminated.');
  //             break;
  //           default:
  //             break;
  //         }
  //       });

  //       // Handle incoming INVITE request.
  //       const constrainsDefault: MediaStreamConstraints = {
  //         audio: true,
  //         video: true,
  //       };

  //       const options: InvitationAcceptOptions = {
  //         sessionDescriptionHandlerOptions: {
  //           constraints: constrainsDefault,
  //         },
  //       };

  //       // incomingSession.accept(options);
  //     }


  //   };    // UA.delegate
  // }






  // async getMedia(): Promise<void> {

  //   const option = {video: true, audio: true};
  //   const mediaDevices = navigator.mediaDevices as any;

  //   await mediaDevices.getUserMedia(option)
  //     .then((streams) => {

  //       const pc: any = Session.sessionDescriptionHandler.peerConnection;
  //       const videoTrack = streams.getVideoTracks()[0];

  //       const sender = pc.getSenders().find((s) => {
  //         return s.track.kind === videoTrack.kind;
  //       });
  //       console.log('found sender:', sender);
  //       sender.replaceTrack(videoTrack);

  //     }, (error: void) => {
  //       console.log('error ', error);
  //     });



  // }







  async nativeWindow(id: any): Promise<void> {
    return await _window(id);
  }


}
